{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to TechLadies AFA Diary", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-techladies-afa-diary", 
            "text": "", 
            "title": "Welcome to TechLadies AFA Diary"
        }, 
        {
            "location": "/project/git/", 
            "text": "Git\n\n\nWe are using \nGit\n as our version control system and\n\nGitHub\n for hosting our repositories and for collaboration.\n\n\nTutorials\n\n\nTo learn the basics of Git we worked through the following tutorials:\n\n\n\n\nhttps://try.github.io\n\n\nhttps://guides.github.com/activities/hello-world/\n\n\nhttps://github.com/git-game/git-game\n\n\n\n\nWe also participated in a three-hour workshop conducted by the organizers of\nthe \nGrumpy Gits SG User Group\n.\n\n\nWarning\n: Learning Git on your own is a difficult task, because there are\nmany different commands that you need to memorize. To make things worse, there\nis one command called \"checkout\" that does at least three completely different\nthings and some of those things don't even have anything to do with \"checking\nsomething out.\n\n\nThere are also dozens of ways to orchestrate all those many commands. Basically\nevery company out there has their own internal workflow, therefore you will not\nfind the one definite tutorial that teaches you how to do it and if you ask\nquestions, three people will give you three different answers.\n\n\nYou should definitely team up with a mentor who can guide you and work through a\nfew test-scenarios with you and ultimately you need to understand what Git is\ndoing on your hard disk in order to really have confidence in whatever workflow\nyou decided to use.\n\n\nWorkflow\n\n\nIn order to collaborate on this repository, we will stick to a simplified\nworkflow that has only the \nmaster\n branch as a stable branch.\n\n\nThis means, whatever we merge into \nmaster\n should be good. At all times must we\nbe confident that the \nmaster\n branch can be deployed by using the\n\nmkdocs gh-deploy\n command.\n\n\nIn plain English, our workflow works as follows: When you decide to create a\nchange, you first pull the latest version of the \nmaster\n branch from GitHub.\nThen you create a feature branch and make your changes. When you are done, you\npush your feature branch to GitHub so that the team can make a code-review.\n\n\n\n\ngit co master\n (switch to master branch)\n\n\ngit pull\n (get the latest version of the master branch)\n\n\ngit co -b feature_branch\n (create your own feature branch)\n\n\nwork work work work work work\n\n\ngit add .\n (add your changes to the staging area)\n\n\ngit commit\n (commit your changes)\n\n\ngit push origin feature_branch\n (push your feature branch to GitHub)\n\n\n\n\nYour mentor will usually do this, but for the sake of completeness, here is how\nwe merge your changes back into the \nmaster\n branch when you have passed the\ncode-review:\n\n\nFirst we pull the latest \nmaster\n branch just to be sure that we are up to\ndate. Then we go into the feature branch and try to merge the \nmaster\n branch\ninto the feature branch. We do this because other team members might have\npushed to the \nmaster\n branch while you were working on your feature and there\nmight be merge conflicts if both members worked on the same files. We want to\nresolve those conflicts in the feature branch, just to be sure that we don't\naccidentally mess up the master branch during the conflict resolution.\n\n\nMost of the time, there won't be any conflicts. In that case, we will switch\nback into the \nmaster\n branch and then merge the feature branch with the\n\n--no-ff\n flag into the \nmaster\n branch. The \n--no-ff\n makes sure that we can\nsee \"a bump\" in the diagram view of our repository, so in the future we can\nstill tell that a bunch of commits have all been made inside a certain\nfeature branch. Once the feature branch has been merged into the master branch,\nit can be deleted locally and on GitHub.\n\n\n\n\ngit co master\n (switch to master branch)\n\n\ngit pull\n (get latest version of master branch)\n\n\ngit co feature_branch\n (switch to feature branch)\n\n\ngit merge master\n (resolve merge conflicts, if any)\n\n\ngit co master\n (switch back to master branch)\n\n\ngit merge --no-ff feature_branch\n (merge the feature branch)\n\n\ngit push\n (push new master branch to GitHub)\n\n\ngit branch -d feature_branch\n (delete the feature branch locally)\n\n\ngit push origin :feature_branch\n (delete feature branch on GitHub)", 
            "title": "Git"
        }, 
        {
            "location": "/project/git/#git", 
            "text": "We are using  Git  as our version control system and GitHub  for hosting our repositories and for collaboration.", 
            "title": "Git"
        }, 
        {
            "location": "/project/git/#tutorials", 
            "text": "To learn the basics of Git we worked through the following tutorials:   https://try.github.io  https://guides.github.com/activities/hello-world/  https://github.com/git-game/git-game   We also participated in a three-hour workshop conducted by the organizers of\nthe  Grumpy Gits SG User Group .  Warning : Learning Git on your own is a difficult task, because there are\nmany different commands that you need to memorize. To make things worse, there\nis one command called \"checkout\" that does at least three completely different\nthings and some of those things don't even have anything to do with \"checking\nsomething out.  There are also dozens of ways to orchestrate all those many commands. Basically\nevery company out there has their own internal workflow, therefore you will not\nfind the one definite tutorial that teaches you how to do it and if you ask\nquestions, three people will give you three different answers.  You should definitely team up with a mentor who can guide you and work through a\nfew test-scenarios with you and ultimately you need to understand what Git is\ndoing on your hard disk in order to really have confidence in whatever workflow\nyou decided to use.", 
            "title": "Tutorials"
        }, 
        {
            "location": "/project/git/#workflow", 
            "text": "In order to collaborate on this repository, we will stick to a simplified\nworkflow that has only the  master  branch as a stable branch.  This means, whatever we merge into  master  should be good. At all times must we\nbe confident that the  master  branch can be deployed by using the mkdocs gh-deploy  command.  In plain English, our workflow works as follows: When you decide to create a\nchange, you first pull the latest version of the  master  branch from GitHub.\nThen you create a feature branch and make your changes. When you are done, you\npush your feature branch to GitHub so that the team can make a code-review.   git co master  (switch to master branch)  git pull  (get the latest version of the master branch)  git co -b feature_branch  (create your own feature branch)  work work work work work work  git add .  (add your changes to the staging area)  git commit  (commit your changes)  git push origin feature_branch  (push your feature branch to GitHub)   Your mentor will usually do this, but for the sake of completeness, here is how\nwe merge your changes back into the  master  branch when you have passed the\ncode-review:  First we pull the latest  master  branch just to be sure that we are up to\ndate. Then we go into the feature branch and try to merge the  master  branch\ninto the feature branch. We do this because other team members might have\npushed to the  master  branch while you were working on your feature and there\nmight be merge conflicts if both members worked on the same files. We want to\nresolve those conflicts in the feature branch, just to be sure that we don't\naccidentally mess up the master branch during the conflict resolution.  Most of the time, there won't be any conflicts. In that case, we will switch\nback into the  master  branch and then merge the feature branch with the --no-ff  flag into the  master  branch. The  --no-ff  makes sure that we can\nsee \"a bump\" in the diagram view of our repository, so in the future we can\nstill tell that a bunch of commits have all been made inside a certain\nfeature branch. Once the feature branch has been merged into the master branch,\nit can be deleted locally and on GitHub.   git co master  (switch to master branch)  git pull  (get latest version of master branch)  git co feature_branch  (switch to feature branch)  git merge master  (resolve merge conflicts, if any)  git co master  (switch back to master branch)  git merge --no-ff feature_branch  (merge the feature branch)  git push  (push new master branch to GitHub)  git branch -d feature_branch  (delete the feature branch locally)  git push origin :feature_branch  (delete feature branch on GitHub)", 
            "title": "Workflow"
        }, 
        {
            "location": "/project/ansible/", 
            "text": "", 
            "title": "Ansible"
        }, 
        {
            "location": "/project/django/", 
            "text": "", 
            "title": "Django"
        }, 
        {
            "location": "/project/html/", 
            "text": "", 
            "title": "HTML / CSS"
        }, 
        {
            "location": "/glossary/", 
            "text": "Glossary\n\n\nDuring our journey of learning how to build a full-stack Django project,\nwe will learn many new technical terms. We will try to keep track of them\nin this glossary.\n\n\nBranch\n\n\nCheckout\n\n\nCommit\n\n\nFull Stack\n\n\nGit\n\n\nMaster Branch\n\n\nMerge\n\n\nPull\n\n\nPush\n\n\nRebase", 
            "title": "Glossary"
        }, 
        {
            "location": "/glossary/#glossary", 
            "text": "During our journey of learning how to build a full-stack Django project,\nwe will learn many new technical terms. We will try to keep track of them\nin this glossary.", 
            "title": "Glossary"
        }, 
        {
            "location": "/glossary/#branch", 
            "text": "", 
            "title": "Branch"
        }, 
        {
            "location": "/glossary/#checkout", 
            "text": "", 
            "title": "Checkout"
        }, 
        {
            "location": "/glossary/#commit", 
            "text": "", 
            "title": "Commit"
        }, 
        {
            "location": "/glossary/#full-stack", 
            "text": "", 
            "title": "Full Stack"
        }, 
        {
            "location": "/glossary/#git", 
            "text": "", 
            "title": "Git"
        }, 
        {
            "location": "/glossary/#master-branch", 
            "text": "", 
            "title": "Master Branch"
        }, 
        {
            "location": "/glossary/#merge", 
            "text": "", 
            "title": "Merge"
        }, 
        {
            "location": "/glossary/#pull", 
            "text": "", 
            "title": "Pull"
        }, 
        {
            "location": "/glossary/#push", 
            "text": "", 
            "title": "Push"
        }, 
        {
            "location": "/glossary/#rebase", 
            "text": "", 
            "title": "Rebase"
        }
    ]
}